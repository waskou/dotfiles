{
  "version": 3,
  "sources": ["../src/index.tsx", "../src/storage.ts", "../node_modules/nanoid/index.js", "../node_modules/nanoid/url-alphabet/index.js", "../src/utils.ts"],
  "sourcesContent": ["import { Form, ActionPanel, Action, showToast, Icon, Color, popToRoot } from \"@raycast/api\";\nimport { Item } from \"./types\";\nimport { getItems, saveItems } from \"./storage\";\nimport { nanoid } from \"nanoid\";\nimport { validateItem } from \"./utils\";\n\nexport default function Command() {\n  async function handleSubmit(item: Item) {\n    if (validateItem(item)) {\n      const existingItems = await getItems();\n      existingItems.push({ ...item, id: nanoid() });\n\n      popToRoot();\n      saveItems(existingItems);\n      showToast({ title: \"Success\", message: \"Successfully added item\" });\n    }\n  }\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm onSubmit={handleSubmit} />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField id=\"name\" title=\"Name\" placeholder=\"Enter Name\" />\n      <Form.TextField id=\"subtitle\" title=\"Subtitle\" placeholder=\"Enter Subtitle (optional)\" />\n      <Form.DatePicker id=\"date\" title=\"Date\" />\n      <Form.Dropdown id=\"icon\" title=\"Icon\" defaultValue=\"\">\n        {Object.entries(Icon).map(([k, v]) => (\n          <Form.Dropdown.Item value={v} key={k} title={k} icon={v} />\n        ))}\n      </Form.Dropdown>\n      <Form.Dropdown id=\"color\" title=\"Color\" defaultValue=\"\">\n        <Form.Dropdown.Item value=\"\" title=\"No Color\" />\n        {Object.entries(Color).map(([k, v]) => (\n          <Form.Dropdown.Item value={`${v}`} key={k} title={k} icon={{ source: Icon.Dot, tintColor: v }} />\n        ))}\n      </Form.Dropdown>\n    </Form>\n  );\n}\n", "import { LocalStorage } from \"@raycast/api\";\nimport { Item } from \"./types\";\n\nexport async function getItems(): Promise<Item[]> {\n  const { items } = await LocalStorage.allItems();\n  if (!items) return [];\n\n  return JSON.parse(items);\n}\n\nexport async function saveItems(items: Item[]) {\n  await LocalStorage.setItem(\"items\", JSON.stringify(items));\n}\n", "import crypto from 'crypto'\nimport { urlAlphabet } from './url-alphabet/index.js'\nconst POOL_SIZE_MULTIPLIER = 128\nlet pool, poolOffset\nlet fillPool = bytes => {\n  if (!pool || pool.length < bytes) {\n    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER)\n    crypto.randomFillSync(pool)\n    poolOffset = 0\n  } else if (poolOffset + bytes > pool.length) {\n    crypto.randomFillSync(pool)\n    poolOffset = 0\n  }\n  poolOffset += bytes\n}\nlet random = bytes => {\n  fillPool((bytes -= 0))\n  return pool.subarray(poolOffset - bytes, poolOffset)\n}\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1\n  let step = Math.ceil((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let i = step\n      while (i--) {\n        id += alphabet[bytes[i] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  fillPool((size -= 0))\n  let id = ''\n  for (let i = poolOffset - size; i < poolOffset; i++) {\n    id += urlAlphabet[pool[i] & 63]\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n", "let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nexport { urlAlphabet }\n", "import { showToast, Toast } from \"@raycast/api\";\nimport { Item } from \"./types\";\n\nexport function pluralize(length: number): string {\n  return `item${length > 1 ? \"s\" : \"\"}`;\n}\n\nexport function validateItem(item: Item) {\n  if (item.name === \"\") {\n    showToast(Toast.Style.Failure, \"An error occurred\", \"Name can not be empty\");\n    return false;\n  }\n\n  if (item.date === null) {\n    showToast(Toast.Style.Failure, \"An error occurred\", \"Please select a date\");\n    return false;\n  }\n\n  return true;\n}\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAA6E,wBCA7E,IAAAC,EAA6B,wBAG7B,eAAsBC,GAA4B,CAChD,GAAM,CAAE,MAAAC,CAAM,EAAI,MAAM,eAAa,SAAS,EAC9C,OAAKA,EAEE,KAAK,MAAMA,CAAK,EAFJ,CAAC,CAGtB,CAEA,eAAsBC,EAAUD,EAAe,CAC7C,MAAM,eAAa,QAAQ,QAAS,KAAK,UAAUA,CAAK,CAAC,CAC3D,CCZA,IAAAE,EAAmB,uBCAnB,IAAIC,EACF,mEDCF,IAAMC,EAAuB,IACzBC,EAAMC,EACNC,EAAWC,GAAS,CAClB,CAACH,GAAQA,EAAK,OAASG,GACzBH,EAAO,OAAO,YAAYG,EAAQJ,CAAoB,EACtD,EAAAK,QAAO,eAAeJ,CAAI,EAC1BC,EAAa,GACJA,EAAaE,EAAQH,EAAK,SACnC,EAAAI,QAAO,eAAeJ,CAAI,EAC1BC,EAAa,GAEfA,GAAcE,CAChB,EAsBA,IAAIE,EAAS,CAACC,EAAO,KAAO,CAC1BC,EAAUD,GAAQ,CAAE,EACpB,IAAIE,EAAK,GACT,QAASC,EAAIC,EAAaJ,EAAMG,EAAIC,EAAYD,IAC9CD,GAAMG,EAAYC,EAAKH,CAAC,EAAI,EAAE,EAEhC,OAAOD,CACT,EE3CA,IAAAK,EAAiC,wBAO1B,SAASC,EAAaC,EAAY,CACvC,OAAIA,EAAK,OAAS,OAChB,aAAU,QAAM,MAAM,QAAS,oBAAqB,uBAAuB,EACpE,IAGLA,EAAK,OAAS,SAChB,aAAU,QAAM,MAAM,QAAS,oBAAqB,sBAAsB,EACnE,IAGF,EACT,CJGU,IAAAC,EAAA,6BAhBK,SAARC,GAA2B,CAChC,eAAeC,EAAaC,EAAY,CACtC,GAAIC,EAAaD,CAAI,EAAG,CACtB,IAAME,EAAgB,MAAMC,EAAS,EACrCD,EAAc,KAAK,CAAE,GAAGF,EAAM,GAAII,EAAO,CAAE,CAAC,KAE5C,aAAU,EACVC,EAAUH,CAAa,KACvB,aAAU,CAAE,MAAO,UAAW,QAAS,yBAA0B,CAAC,EAEtE,CAEA,SACE,QAAC,QACC,WACE,OAAC,eACC,mBAAC,SAAO,WAAP,CAAkB,SAAUH,EAAc,EAC7C,EAGF,oBAAC,OAAK,UAAL,CAAe,GAAG,OAAO,MAAM,OAAO,YAAY,aAAa,KAChE,OAAC,OAAK,UAAL,CAAe,GAAG,WAAW,MAAM,WAAW,YAAY,4BAA4B,KACvF,OAAC,OAAK,WAAL,CAAgB,GAAG,OAAO,MAAM,OAAO,KACxC,OAAC,OAAK,SAAL,CAAc,GAAG,OAAO,MAAM,OAAO,aAAa,GAChD,gBAAO,QAAQ,MAAI,EAAE,IAAI,CAAC,CAACO,EAAGC,CAAC,OAC9B,OAAC,OAAK,SAAS,KAAd,CAAmB,MAAOA,EAAW,MAAOD,EAAG,KAAMC,GAAnBD,CAAsB,CAC1D,EACH,KACA,QAAC,OAAK,SAAL,CAAc,GAAG,QAAQ,MAAM,QAAQ,aAAa,GACnD,oBAAC,OAAK,SAAS,KAAd,CAAmB,MAAM,GAAG,MAAM,WAAW,EAC7C,OAAO,QAAQ,OAAK,EAAE,IAAI,CAAC,CAACA,EAAGC,CAAC,OAC/B,OAAC,OAAK,SAAS,KAAd,CAAmB,MAAO,GAAGA,IAAa,MAAOD,EAAG,KAAM,CAAE,OAAQ,OAAK,IAAK,UAAWC,CAAE,GAApDD,CAAuD,CAChG,GACH,GACF,CAEJ",
  "names": ["src_exports", "__export", "Command", "__toCommonJS", "import_api", "import_api", "getItems", "items", "saveItems", "import_crypto", "urlAlphabet", "POOL_SIZE_MULTIPLIER", "pool", "poolOffset", "fillPool", "bytes", "crypto", "nanoid", "size", "fillPool", "id", "i", "poolOffset", "urlAlphabet", "pool", "import_api", "validateItem", "item", "import_jsx_runtime", "Command", "handleSubmit", "item", "validateItem", "existingItems", "getItems", "nanoid", "saveItems", "k", "v"]
}
